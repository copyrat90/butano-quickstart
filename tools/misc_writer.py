from pathlib import Path
from typing import Final, List
from dataclasses import dataclass
from datetime import datetime

NAMESPACE: Final[str] = "bq"


def remove_built_files(build_folder_path: Path):
    for path in build_folder_path.joinpath("include/gen").glob("*.h"):
        path.unlink(missing_ok=True)
    for path in build_folder_path.joinpath("src").glob("*.cpp"):
        path.unlink(missing_ok=True)


def write_license_header(
    license_folder_path: Path, build_folder_path: Path, tools_mtime: float
):
    build_include_path = build_folder_path.joinpath("include/gen")
    license_header_path = build_include_path.joinpath("licenses.h")

    @dataclass
    class LicenseInfo:
        name: str
        content: str

    license_paths = sorted(license_folder_path.rglob("*.*"))
    src_mtime: float = 0.0
    for license_path in license_paths:
        src_mtime = max(src_mtime, license_path.stat().st_mtime)

    if (
        license_header_path.exists()
        and src_mtime < license_header_path.stat().st_mtime
        and tools_mtime < license_header_path.stat().st_mtime
    ):
        return

    license_infos: List[LicenseInfo] = []
    for license_path in license_paths:
        with open(license_path, encoding="utf-8") as license_file:
            license_infos.append(
                LicenseInfo(license_path.stem.replace("_", "-"), license_file.read())
            )

    with open(license_header_path, "w", encoding="utf-8") as header:
        header.write(f"// Generated by `misc_writer.py` in {datetime.now()}\n")
        header.write("//\n")
        header.write(
            "// DO NOT edit this file directly - changes will be overwritten!\n\n"
        )
        header.write("#pragma once\n\n")

        header.write("#include <bn_array.h>\n")
        header.write("#include <bn_string_view.h>\n\n")

        header.write(f"namespace {NAMESPACE}::gen\n")
        header.write("{\n\n")

        header.write(
            f"inline constexpr bn::array<const bn::string_view, {len(license_infos)}> LICENSE_NAMES = {{\n"
        )
        for license_info in license_infos:
            header.write(f'R"({license_info.name})",\n')
        header.write("};\n\n")

        header.write(
            f"inline constexpr bn::array<const bn::string_view, {len(license_infos)}> LICENSE_CONTENTS = {{\n"
        )
        for license_info in license_infos:
            header.write(f'R"({license_info.content})",\n')
        header.write("};\n\n")

        header.write(f"}} // namespace {NAMESPACE}::gen\n")


def write_miscs(license_folder_path: Path, build_folder_path: Path):
    try:
        build_folder_path.joinpath("include/gen").mkdir(parents=True, exist_ok=True)
        build_folder_path.joinpath("src").mkdir(parents=True, exist_ok=True)

        tools_path = Path(__file__).parent
        tools_mtime = max(p.stat().st_mtime for p in tools_path.glob("*.py"))

        write_license_header(license_folder_path, build_folder_path, tools_mtime)

    except:
        remove_built_files(build_folder_path)
        raise
